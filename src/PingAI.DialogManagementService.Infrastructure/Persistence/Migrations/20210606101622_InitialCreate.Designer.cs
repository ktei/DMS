// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PingAI.DialogManagementService.Domain.Model;
using PingAI.DialogManagementService.Infrastructure.Persistence;

namespace PingAI.DialogManagementService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DialogManagementContext))]
    [Migration("20210606101622_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum("chatbot", "enum_ChatHistories_session_status", new[] { "CHATBOT", "HANDOVER" })
                .HasPostgresEnum("chatbot", "enum_Intents_type", new[] { "STANDARD", "GENERIC" })
                .HasPostgresEnum("chatbot", "enum_PhraseParts_type", new[] { "CONSTANT_ENTITY", "ENTITY", "TEXT" })
                .HasPostgresEnum("chatbot", "enum_Response_type", new[] { "RTE", "HANDOVER", "VIDEO", "SOCIAL", "WEBHOOK", "FORM", "QUICK_REPLY" })
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("OrganisationUser", b =>
                {
                    b.Property<Guid>("organisationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 938, DateTimeKind.Utc).AddTicks(1390))
                        .HasColumnName("createdAt");

                    b.Property<Guid>("P1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("1b9c75df-2928-4675-83b2-e09dfe46696e"))
                        .HasColumnName("id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 938, DateTimeKind.Utc).AddTicks(1770))
                        .HasColumnName("updatedAt");

                    b.HasKey("organisationId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("OrganisationUsers", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.ChatHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 958, DateTimeKind.Utc).AddTicks(4330))
                        .HasColumnName("createdAt");

                    b.Property<string>("Input")
                        .HasColumnType("jsonb")
                        .HasColumnName("input");

                    b.Property<string>("Output")
                        .HasColumnType("jsonb")
                        .HasColumnName("output");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("projectId");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("requestId");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("sessionId");

                    b.Property<SessionStatus>("SessionStatus")
                        .HasColumnType("chatbot.\"enum_ChatHistories_session_status\"")
                        .HasColumnName("sessionStatus");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 958, DateTimeKind.Utc).AddTicks(4730))
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("ChatHistories", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.EntityName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("CanBeReferenced")
                        .HasColumnType("boolean")
                        .HasColumnName("canBeReferenced");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 961, DateTimeKind.Utc).AddTicks(7270))
                        .HasColumnName("createdAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("projectId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 961, DateTimeKind.Utc).AddTicks(8090))
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EntityNames", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.EntityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 967, DateTimeKind.Utc).AddTicks(990))
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("projectId");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 967, DateTimeKind.Utc).AddTicks(1950))
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EntityTypes", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.EntityValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 968, DateTimeKind.Utc).AddTicks(9400))
                        .HasColumnName("createdAt");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("entityTypeId");

                    b.Property<string[]>("Synonyms")
                        .HasColumnType("text[]")
                        .HasColumnName("synonyms");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 968, DateTimeKind.Utc).AddTicks(9830))
                        .HasColumnName("updatedAt");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("EntityValues", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.GreetingResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 972, DateTimeKind.Utc).AddTicks(7200))
                        .HasColumnName("createdAt");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("projectId");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uuid")
                        .HasColumnName("responseId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 972, DateTimeKind.Utc).AddTicks(7450))
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResponseId");

                    b.ToTable("GreetingResponses", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Intent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 976, DateTimeKind.Utc).AddTicks(9290))
                        .HasColumnName("createdAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("projectId");

                    b.Property<IntentType>("Type")
                        .HasColumnType("chatbot.\"enum_Intents_type\"")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 976, DateTimeKind.Utc).AddTicks(9880))
                        .HasColumnName("updatedAt");

                    b.Property<string>("_color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("_iconName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iconName");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Intents", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Organisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 6, DateTimeKind.Utc).AddTicks(940))
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 6, DateTimeKind.Utc).AddTicks(1490))
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Organisations", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.PhrasePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 11, DateTimeKind.Utc).AddTicks(240))
                        .HasColumnName("createdAt");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("displayOrder");

                    b.Property<Guid?>("EntityNameId")
                        .HasColumnType("uuid")
                        .HasColumnName("entityNameId");

                    b.Property<Guid?>("EntityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("entityTypeId");

                    b.Property<Guid>("IntentId")
                        .HasColumnType("uuid")
                        .HasColumnName("intentId");

                    b.Property<Guid>("PhraseId")
                        .HasColumnType("uuid")
                        .HasColumnName("phraseId");

                    b.Property<int?>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<PhrasePartType>("Type")
                        .HasColumnType("chatbot.\"enum_PhraseParts_type\"")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 11, DateTimeKind.Utc).AddTicks(1220))
                        .HasColumnName("updatedAt");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("EntityNameId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("IntentId");

                    b.ToTable("PhraseParts", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BusinessEmail")
                        .HasColumnType("text")
                        .HasColumnName("businessEmail");

                    b.Property<DateTime?>("BusinessTimeEndUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("businessTimeEndUtc");

                    b.Property<DateTime?>("BusinessTimeStartUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("businessTimeStartUtc");

                    b.Property<string>("BusinessTimezone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("businessTimezone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 18, DateTimeKind.Utc).AddTicks(1260))
                        .HasColumnName("createdAt");

                    b.Property<string[]>("Domains")
                        .HasColumnType("text[]")
                        .HasColumnName("domains");

                    b.Property<string[]>("Enquiries")
                        .HasColumnType("text[]")
                        .HasColumnName("enquiries");

                    b.Property<string>("FallbackMessage")
                        .HasColumnType("text")
                        .HasColumnName("fallbackMessage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organisationId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 18, DateTimeKind.Utc).AddTicks(2820))
                        .HasColumnName("updatedAt");

                    b.Property<string>("WidgetColor")
                        .HasColumnType("text")
                        .HasColumnName("widgetColor");

                    b.Property<string>("WidgetDescription")
                        .HasColumnType("text")
                        .HasColumnName("widgetDescription");

                    b.Property<string>("WidgetTitle")
                        .HasColumnType("text")
                        .HasColumnName("widgetTitle");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Projects", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.ProjectVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 22, DateTimeKind.Utc).AddTicks(9590))
                        .HasColumnName("createdAt");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organisationId");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("projectId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 23, DateTimeKind.Utc).AddTicks(420))
                        .HasColumnName("updatedAt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<Guid>("VersionGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("versionGroupId");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectVersions", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Query", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 37, DateTimeKind.Utc).AddTicks(9240))
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("displayOrder");

                    b.Property<Expression[]>("Expressions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("expressions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("projectId");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 37, DateTimeKind.Utc).AddTicks(9670))
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Queries", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 42, DateTimeKind.Utc).AddTicks(4980))
                        .HasColumnName("createdAt");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("projectId");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("resolution");

                    b.Property<string>("SpeechContexts")
                        .HasColumnType("jsonb")
                        .HasColumnName("speechContexts");

                    b.Property<ResponseType>("Type")
                        .HasColumnType("chatbot.\"enum_Response_type\"")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 42, DateTimeKind.Utc).AddTicks(5590))
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Responses", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.SlackWorkspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 44, DateTimeKind.Utc).AddTicks(4390))
                        .HasColumnName("createdAt");

                    b.Property<string>("OAuthAccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("oauthAccessToken");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("projectId");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("teamId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 44, DateTimeKind.Utc).AddTicks(4960))
                        .HasColumnName("updatedAt");

                    b.Property<string>("WebhookUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("webhookURL");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SlackWorkspaces", "chatbot");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("auth0Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 45, DateTimeKind.Utc).AddTicks(5940))
                        .HasColumnName("createdAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 22, 45, DateTimeKind.Utc).AddTicks(6570))
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Users", "chatbot");
                });

            modelBuilder.Entity("QueryIntent", b =>
                {
                    b.Property<Guid>("intentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("queryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 935, DateTimeKind.Utc).AddTicks(7420))
                        .HasColumnName("createdAt");

                    b.Property<Guid>("P1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("9d8ddd5b-6188-45e4-9e19-b8433496ec4e"))
                        .HasColumnName("id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 935, DateTimeKind.Utc).AddTicks(8280))
                        .HasColumnName("updatedAt");

                    b.HasKey("intentId", "queryId");

                    b.HasIndex("queryId");

                    b.ToTable("QueryIntents", "chatbot");
                });

            modelBuilder.Entity("QueryResponse", b =>
                {
                    b.Property<Guid>("queryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("responseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 936, DateTimeKind.Utc).AddTicks(6410))
                        .HasColumnName("createdAt");

                    b.Property<Guid>("P1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("002f79de-7bb4-40e4-b7b8-ef306719e912"))
                        .HasColumnName("id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 6, 10, 16, 21, 936, DateTimeKind.Utc).AddTicks(6640))
                        .HasColumnName("updatedAt");

                    b.HasKey("queryId", "responseId");

                    b.HasIndex("responseId");

                    b.ToTable("QueryResponses", "chatbot");
                });

            modelBuilder.Entity("OrganisationUser", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Organisation", null)
                        .WithMany()
                        .HasForeignKey("organisationId")
                        .HasConstraintName("OrganisationUsers_organisationId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PingAI.DialogManagementService.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .HasConstraintName("OrganisationUsers_userId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.EntityName", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Project", "Project")
                        .WithMany("EntityNames")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.EntityType", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Project", "Project")
                        .WithMany("EntityTypes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.EntityValue", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.EntityType", "EntityType")
                        .WithMany("Values")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.GreetingResponse", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Project", "Project")
                        .WithMany("GreetingResponses")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Intent", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Project", "Project")
                        .WithMany("Intents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.PhrasePart", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.EntityName", "EntityName")
                        .WithMany()
                        .HasForeignKey("EntityNameId");

                    b.HasOne("PingAI.DialogManagementService.Domain.Model.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId");

                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Intent", "Intent")
                        .WithMany("PhraseParts")
                        .HasForeignKey("IntentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityName");

                    b.Navigation("EntityType");

                    b.Navigation("Intent");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Project", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Organisation", "Organisation")
                        .WithMany("Projects")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.ProjectVersion", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Organisation", "Organisation")
                        .WithMany("ProjectVersions")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Project", "Project")
                        .WithOne("ProjectVersion")
                        .HasForeignKey("PingAI.DialogManagementService.Domain.Model.ProjectVersion", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Query", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Project", "Project")
                        .WithMany("Queries")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Response", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Project", "Project")
                        .WithMany("Responses")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.SlackWorkspace", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("QueryIntent", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Intent", null)
                        .WithMany()
                        .HasForeignKey("intentId")
                        .HasConstraintName("QueryIntents_intentId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Query", null)
                        .WithMany()
                        .HasForeignKey("queryId")
                        .HasConstraintName("QueryIntents_queryId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QueryResponse", b =>
                {
                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Query", null)
                        .WithMany()
                        .HasForeignKey("queryId")
                        .HasConstraintName("QueryResponses_queryId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PingAI.DialogManagementService.Domain.Model.Response", null)
                        .WithMany()
                        .HasForeignKey("responseId")
                        .HasConstraintName("QueryResponses_responseId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.EntityType", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Intent", b =>
                {
                    b.Navigation("PhraseParts");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Organisation", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("ProjectVersions");
                });

            modelBuilder.Entity("PingAI.DialogManagementService.Domain.Model.Project", b =>
                {
                    b.Navigation("EntityNames");

                    b.Navigation("EntityTypes");

                    b.Navigation("GreetingResponses");

                    b.Navigation("Intents");

                    b.Navigation("ProjectVersion")
                        .IsRequired();

                    b.Navigation("Queries");

                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
